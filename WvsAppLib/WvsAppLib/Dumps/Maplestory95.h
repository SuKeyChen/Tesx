/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'Maplestory95'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _GUID;
struct _SCOPETABLE_ENTRY;
struct _IP_ADDR_STRING;
struct $F03B70C123AB6920C4DDA521DD856E56;
struct _PROCESS_MEMORY_COUNTERS;
struct tagPROCESSENTRY32;
struct tagTHREADENTRY32;
struct tagMODULEENTRY32;
struct HINSTANCE__;
struct _iobuf;

/* 1 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 8 */
typedef unsigned __int32 DWORD;

/* 2 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 3 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 4 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 5 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 6 */
typedef _GUID GUID;

/* 9 */
typedef unsigned __int16 WORD;

/* 10 */
typedef unsigned __int8 BYTE;

/* 7 */
struct _GUID
{
  DWORD Data1;
  WORD Data2;
  WORD Data3;
  BYTE Data4[8];
};

/* 11 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 12 */
struct _EH4_SCOPETABLE_RECORD
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 13 */
struct _EH4_SCOPETABLE
{
  DWORD GSCookieOffset;
  DWORD GSCookieXOROffset;
  DWORD EHCookieOffset;
  DWORD EHCookieXOROffset;
  struct _EH4_SCOPETABLE_RECORD ScopeRecord[];
};

/* 15 */
typedef unsigned __int8 UCHAR;

/* 16 */
typedef UCHAR *PUCHAR;

/* 17 */
typedef void *HANDLE;

/* 14 */
struct _NCB
{
  UCHAR ncb_command;
  UCHAR ncb_retcode;
  UCHAR ncb_lsn;
  UCHAR ncb_num;
  PUCHAR ncb_buffer;
  WORD ncb_length;
  UCHAR ncb_callname[16];
  UCHAR ncb_name[16];
  UCHAR ncb_rto;
  UCHAR ncb_sto;
  void (__stdcall *ncb_post)(_NCB *);
  UCHAR ncb_lana_num;
  UCHAR ncb_cmd_cplt;
  UCHAR ncb_reserve[10];
  HANDLE ncb_event;
};

/* 19 */
typedef unsigned int UINT;

/* 20 */
typedef _IP_ADDR_STRING *PIP_ADDR_STRING;

/* 22 */
typedef $F03B70C123AB6920C4DDA521DD856E56 IP_ADDRESS_STRING;

/* 23 */
struct $F03B70C123AB6920C4DDA521DD856E56
{
  char String[16];
};

/* 24 */
typedef $F03B70C123AB6920C4DDA521DD856E56 IP_MASK_STRING;

/* 21 */
struct _IP_ADDR_STRING
{
  _IP_ADDR_STRING *Next;
  IP_ADDRESS_STRING IpAddress;
  IP_MASK_STRING IpMask;
  DWORD Context;
};

/* 25 */
typedef _IP_ADDR_STRING IP_ADDR_STRING;

/* 26 */
typedef int BOOL;

/* 27 */
typedef __int32 time_t;

/* 18 */
struct _IP_ADAPTER_INFO
{
  _IP_ADAPTER_INFO *Next;
  DWORD ComboIndex;
  char AdapterName[260];
  char Description[132];
  UINT AddressLength;
  BYTE Address[8];
  DWORD Index;
  UINT Type;
  UINT DhcpEnabled;
  PIP_ADDR_STRING CurrentIpAddress;
  IP_ADDR_STRING IpAddressList;
  IP_ADDR_STRING GatewayList;
  IP_ADDR_STRING DhcpServer;
  BOOL HaveWins;
  IP_ADDR_STRING PrimaryWinsServer;
  IP_ADDR_STRING SecondaryWinsServer;
  time_t LeaseObtained;
  time_t LeaseExpires;
};

/* 28 */
typedef _PROCESS_MEMORY_COUNTERS PROCESS_MEMORY_COUNTERS;

/* 31 */
typedef unsigned __int32 UINT_PTR;

/* 30 */
typedef UINT_PTR SIZE_T;

/* 29 */
#pragma pack(push, 1)
struct _PROCESS_MEMORY_COUNTERS
{
  DWORD cb;
  DWORD PageFaultCount;
  SIZE_T PeakWorkingSetSize;
  SIZE_T WorkingSetSize;
  SIZE_T QuotaPeakPagedPoolUsage;
  SIZE_T QuotaPagedPoolUsage;
  SIZE_T QuotaPeakNonPagedPoolUsage;
  SIZE_T QuotaNonPagedPoolUsage;
  SIZE_T PagefileUsage;
  SIZE_T PeakPagefileUsage;
};
#pragma pack(pop)

/* 32 */
typedef tagPROCESSENTRY32 PROCESSENTRY32;

/* 34 */
typedef __int32 LONG;

/* 35 */
typedef char CHAR;

/* 33 */
struct tagPROCESSENTRY32
{
  DWORD dwSize;
  DWORD cntUsage;
  DWORD th32ProcessID;
  DWORD th32DefaultHeapID;
  DWORD th32ModuleID;
  DWORD cntThreads;
  DWORD th32ParentProcessID;
  LONG pcPriClassBase;
  DWORD dwFlags;
  CHAR szExeFile[260];
};

/* 36 */
typedef tagTHREADENTRY32 THREADENTRY32;

/* 37 */
struct tagTHREADENTRY32
{
  DWORD dwSize;
  DWORD cntUsage;
  DWORD th32ThreadID;
  DWORD th32OwnerProcessID;
  LONG tpBasePri;
  LONG tpDeltaPri;
  DWORD dwFlags;
};

/* 38 */
typedef tagMODULEENTRY32 MODULEENTRY32;

/* 41 */
typedef HINSTANCE__ *HINSTANCE;

/* 40 */
typedef HINSTANCE HMODULE;

/* 39 */
struct tagMODULEENTRY32
{
  DWORD dwSize;
  DWORD th32ModuleID;
  DWORD th32ProcessID;
  DWORD GlblcntUsage;
  DWORD ProccntUsage;
  BYTE *modBaseAddr;
  DWORD modBaseSize;
  HMODULE hModule;
  char szModule[256];
  char szExePath[260];
};

/* 42 */
struct HINSTANCE__
{
  int unused;
};

/* 43 */
struct CSystemInfo;

/* 44 */
struct _SEH;

/* 45 */
struct HKEY__
{
  int unused;
};

/* 46 */
struct CCandidates;

/* 47 */
struct CProcessMap;

/* 48 */
typedef _iobuf FILE;

/* 49 */
#pragma pack(push, 8)
struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};
#pragma pack(pop)

/* 50 */
struct _PROCESS_INFORMATION
{
  HANDLE hProcess;
  HANDLE hThread;
  DWORD dwProcessId;
  DWORD dwThreadId;
};

/* 51 */
struct _msExcInfo
{
  int Id;
  void *Proc;
};

/* 52 */
struct _msExcept
{
  int Magic;
  int Count;
  void *InfoPtr;
  int CountDtr;
  void *DtrPtr;
  int _unk[3];
  _msExcInfo Info[];
};

/* 53 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 54 */
union __declspec(align(16)) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 55 */
struct __m128d
{
  double m128d_f64[2];
};

/* 56 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

